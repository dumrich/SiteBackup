#+hugo_base_dir: ../

#+TITLE: File I/O on Unix systems
#+DATE: 2022-10-16
#+AUTHOR: "Abhinav Chavali"

#+HUGO_TAGS: Unix C Files
#+HUGO_CATEGORIES: Programming

#+HUGO_DRAFT: false

Unix systems have two ways of doing Input/Output (I/O) in C:
- POSIX File I/O
- ISO C Standard I/O

There are 2 different interfaces for I/O because the latter is meant to be portable. C implmentations must provide the ~<stdio.h>~ header, so it could work theoretically for any C implementation.

The POSIX implementation are unbuffered (more on that later), and usually invoke direct system calls to the kernel.

This post will go over both of types of I/O by implementing a very simple [[https://github.com/abo-abo/swiper#swiper][Swiper]]-like utility (for use in the [[https://git.dumrich.com/chabi/cemacs][Cemacs editor]]) in two different ways. 

Sources: [[https://www.amazon.com/Advanced-Programming-UNIX-Environment-3rd/dp/0321637739][APUE]], [[https://www.amazon.com/Linux-Programming-Interface-System-Handbook/dp/1593272200/ref=pd_lpo_1?pd_rd_i=1593272200&psc=1][TLPI]]

* POSIX File I/O
At the core of the unbuffered POSIX functions are =file descriptors=. File descriptors are non-negative integers that are used to identify open files.

In C, three file descriptors (always the smallest numbers), are automatically reserved for the standard input, the standard output and the standard error (~STDIN_FILNO~, ~STDOUT_FILENO~, and ~STDERR_FILENO~ in =<unistd.h>=).

In Unix, these are considered files, which we can read and write to as any other.

One thing to note about file descriptors, is that the operating system will always assign an open file the smallest file descriptor. For example, if the programmer decides to open a new file at the very beginning of the main function, the file will likely have the descriptor of =3=, as 0, 1, and 2 are already reserved.

** Basic implementation
We start with our interface function; It usually takes a ~*Editor~, but for our purposes, we'll reduce it down to the pathname and the string we want to search for. We will also test it in a :

#+begin_src C
#include <unistd.h>
#include <fcntl.h>
#include <stdbool.h>
#include <string.h>
#include <stdio.h>
#include <ctype.h>

#define BUFFSIZE 4096

void find_in_file(int, size_t, char*);

int main() {
    /* Open File with flags */
    int fd = open("unix-file-io.org", O_RDONLY|O_CREAT);

    find_in_file(fd, "file");

    return close(fd);
}
#+end_src

First, we include some headers, specifically:

- ~<unistd.h>~ gives us the close, lseek functions.
- ~<fcntl.h>~ gives us the open function, and oflag constants
- ~<ctype.h>~ gives us the tolower function

We also define the function ~find_in_file~ and the buffer size.

The buffer size will be how many bytes we will read from the file at a time. More on this later.

The ~open~ function takes a path, and some flags, and returns a file descriptor. This file descriptor is how we will refer to the file from here on out. On most Unix systems, this will be the value 3, as it is the smallest available integer.

Different flags can be Or'd together to create a mode that will determine access permissions.
- ~O_RDONLY~ opens the file for only reading
- ~O_WRONLY~ opens the file for only writing
- ~O_RDWR~ opens the file for both

Optional:
- ~O_APPEND~ appends to the file after every write
- ~O_CREAT~ creates the file if it doesn't exist

A complete list can be found [[https://www.gnu.org/software/libc/manual/html_node/Access-Modes.html][here]].

In this case, we ~Or~ the ~RDONLY~ flag, and the ~CREAT~ flag. This means, that we can only read the file, and if it doesn't exist, it will be created. If we Or'd with a write flag, we would also be able to write to the file.

Next, we call our function, giving it the name "file".

Finally, we close the file. When the process exits, the open files automatically close.

Next, the find_in_file function:
#+begin_src C
char buf[BUFFSIZE];
void find_in_file(int fd, char* phrase) {

    int current_line = 1;
    bool is_eof = false;

    int match_length = strlen(phrase);
    int buf_len;
    
    while(!is_eof) {
        if((buf_len = read(fd, buf, BUFFSIZE)) != BUFFSIZE) {
            is_eof = true;
        } 

        for(int i = 0; i < buf_len - strlen(phrase); i++) {
            int cur_cmp = 0;
            while(cur_cmp < match_length) {
                if(buf[i+cur_cmp] == '\n') {
                    current_line++;
                    goto result;
                }
                if(tolower(buf[i + cur_cmp]) != tolower(phrase[cur_cmp])) {
                    goto result;
                } else {
                    cur_cmp++;
                }
            }
            printf("Line: %d\n", current_line); 

        result:
            continue;
        }
    }
}
#+end_src

- First, we create a buffer of size BUFFSIZE.

- Then, we set some preliminary flags. The initial line is 1, and the offset has not reached the end of file. Finally, we set the length of the phrase to how many characters we have to match.

- Now, we read BUFFSIZE bytes into the buffer. ~read~ returns the number of bytes it read, so if that number is less than the size of the buffer, we know that we have reached the end of the file. In that case, the while loop won't loop again.

- Now that the bytes are in the buffer, we iterate through the current buffer with an algorithm to check if the characters match.

- We check how many characters have been matched, and if the number of characters matched is equal to the length of the phrase, that is a match. If so, we print the line number. We increment the line number if we encounter a newline character.

** Other Functions
There are some other functions that may be useful to know.

*** ~creat~
#+begin_src C
  #include <fcntl.h>
  int creat(const char* path, mode_t mode);
#+end_src

This function is equal to ~open(path, O_WRONLY | O_CREAT | O_TRUNC, mode)~;

Notice how it is opened for writing only.

*** ~lseek~
The ~lseek~ function is another useful function that is used to manipulate the offset (aka current position in a file).

#+begin_src C
  #include <unistd.h>
  off_t lseek(int fd, off_t offset, int whence);
#+end_src

offset could mean different things depending on ~whence~.

- If whence is SEEK_SET, the files current position if offset from the beginning.
- If whence is SEEK_CUR, the files current position if offset from the current position.
- If whence is SEEK_END, the files current position if offset from the size of the file.

If you seek past the end of the file, that creates a hole in the file. The hole is not backed by a storage medium.

Reading and writing operations also manage the offset of the file.

*** ~dup~ and ~dup2~
The ~dup~ functions just clone the file descriptor in the file descriptor table of that process. One special thing about the ~dup~ function is that it chooses the lowest available file descriptor, allowing us to do some special things that we will see later.

#+begin_src C
  #include <unistd.h>
  int dup(int fd);
  int dup2(int fd, int fd2);
#+end_src

~dup~ duplicates /fd/ and gives the result descriptor the lowest available identifier.
~dup2~ duplicates /fd/, giving the new one /fd2/. If /fd2/ is open, it closes it.

~dup~ can be used to, for example, redirect stdout to a file like this:
#+begin_src C
  close(1);
  dup(34);
#+end_src

We clone the file descriptor of some file, duplicating it on standard output.

*** ~sync~ functions
Unix systems have a buffer cache that IO runs through. When we ~write~ to a file, it usually passes through the kernel's buffer cache, and is written at some later time.

The buffer is written eventually, especially when the buffer needs to be reused. The ~sync~ functions just flush the buffer cache.
#+begin_src C
  #include <unistd.h>
  int fsync(int fd);
  void sync(void);
#+end_src

~sync~ queues block buffers for writing. It doesn't wait for the writing to take place
~fsync~ queues only one file descriptor for writing. It does wait for the writing to take place.

* C Standard I/O
The C Standard I/O works a little bit differently. We still read and write and interact with files, but this I/O is a little bit more featureful because it comes with internal buffering. The FILE object maintains its own buffer so it doesn't have to make a system call to read or write every single time.

It may read a little more the first time, so it would just be getting data from its own buffer.

The 3 kinds of I/O are:
- Character I/O, where one character is read or written
- Line I/O, where one line is read or written
- Direct I/O, where the exact number of objects and size of each object is specified.

** Buffering
The main benefit of standard IO is the default buffering functionalities, which aims to reduce the number of ~read~ and ~write~ calls a process makes.

There are 3 kinds of buffering:
- Fully buffered streams maintain a dynamically allocated buffer. The IO is only performed once the buffer is filled up, or the process flushes the buffers.

  A process can /flush/ a buffer by calling ~fflush(3)~ or ~exit(3)~

  Most file streams are fully buffered

- Line buffered streams only perform input or output when they encounter a new line ('\n') character. You can write characters to a buffer, and know that they aren't being flushed unless the newline character is written.

  Terminal streams like stdout are line buffered

- Unbuffered streams just ~read~ and ~write~ directly.

  stderr is unbuffered because the result should appear whether or not a newline is encountered.

*** Set buffering
Buffering can be set using ~setbuf(3)~ and ~setvbuf(3)~. View the man pages for a more detailed look at the functions.

  
** Basic implementation
This is a basic implementation with buffering. This time when we use fopen, we are returned a ~FILE*~. Instead of Or-ing options, we can just add a string of permissions. In this case, we only need "r" (read) permissions.

#+begin_src C
#define BUFFSIZE 4096

void find_in_file(FILE*, const char*);

int main() {
    /* Open File with flags */
    FILE* fd = fopen("search.c", "r");

    find_in_file(fd, "file");

    return fclose(fd);
}
#+end_src

Now, we implement the same basic algorithm as before:
#+begin_src C
char buf[BUFFSIZE];
void find_in_file(FILE* fp, const char* phrase) {
    int current_line = 1;

    const int match_length = strlen(phrase);
    while(fgets(buf, BUFFSIZE, fp)) {
        int buf_len = strlen(buf);
        if(buf_len < match_length) {
            continue;
        }

        for(int i = 0; i < buf_len - match_length; i++) {
            int cur_cmp = 0;
            while(cur_cmp < match_length) {
                if(tolower((unsigned char)buf[i + cur_cmp]) != tolower((unsigned char)phrase[cur_cmp])) {
                    goto result;
                } else {
                    cur_cmp++;
                }
            }
            printf("Line: %d\n", current_line); 

        result:
            continue;
        }
        current_line++;
    }
}
#+end_src

This time fgets reads only one line at a time into the buffer. We implement the same algorithm, though this one works a little bit better.

** Other Functions
Some functions commonly used for Binary I/O are the fread and write functions.

For example, a binary array can be written to a file as such:

#+begin_src C
float buf[8] = {1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1};

int main(void) {
    fwrite(&buf[2], sizeof(float), 2, stdout);
    exit(0);
}

#+end_src

Also, an equivalent to the lseek function above is ~fseek~ and ~ftell~.

~ftell~ simply returns the current offset.

~fseek~ can be used to set the offset, with the same file modes.

#+begin_src C
  #include <stdio.h>

  long ftell(FILE* fp);

  int fseek(FILE* fp, long offset, int whence);
#+end_src

*** Temp files
#+begin_src C
  #include <stdio.h>
  char* tmpname(char*);
  FILE* tmpfile(void);
#+end_src

These functions can be used to generate a temporary file. ~tmpname~ just returns the pathname, whereas ~tmpfile~ returns the stream.
